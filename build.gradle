apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'war'
apply from : 'depLibUtil.gradle'

task wrapper(type: Wrapper) {
	gradleVersion = '2.0'
}

project.webAppDirName = 'WebContent'

sourceSets {
    main {
        java { 
            srcDir 'src'
            exclude '**/test/**'
         }
        resources {
         	srcDir 'src'
         	exclude '**/test/**' 
     	}
    }
    test {
        java {
            srcDir 'src'    
        }
        
    }
}

test {
        //debug = false
        systemProperties = System.properties

        // set JVM arguments for the test JVM(s)
        jvmArgs '-Djava.net.preferIPv4Stack=true'

        //include "**/*Test.class" 

        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }
}


war {
	destinationDir = file("$buildDir/dist")
    archiveName = "Struts2CRUD.war"
}

eclipse {

	project {
        file {
            withXml { xmlProvider ->
				
				//hide grade, grade_cache, build folder in eclipse project view

				Node projectXml = xmlProvider.asNode()
                Node filter = projectXml.appendNode('filteredResources').appendNode('filter')
                filter.appendNode('id', 1407148197090)
                filter.appendNode('name')
                filter.appendNode('type', 10)
                Node matcher = filter.appendNode('matcher')
                matcher.appendNode('id', 'org.eclipse.ui.ide.orFilterMatcher')
                Node arguments = matcher.appendNode('arguments')
                
                Node innerMatcher1 = arguments.appendNode('matcher')
                innerMatcher1.appendNode('id','org.eclipse.ui.ide.multiFilter')
                innerMatcher1.appendNode('arguments','1.0-name-matches-false-false-gradle*')

                Node innerMatcher2 = arguments.appendNode('matcher')
                innerMatcher2.appendNode('id','org.eclipse.ui.ide.multiFilter')
                innerMatcher2.appendNode('arguments','1.0-name-matches-false-false-build*')
            }
        }
    }

	jdt {
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
	}
	wtp {
        facet {
            facet name: 'jst.java', version: '1.7'
            facet name: 'jst.web', version: '3.0'
            facet name: 'wst.jsdt.web', version: '1.0'
        }
    }
    classpath{
       	downloadSources=true
    	
    	containers.clear()
    	containers
            .add('org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7')
    	file{
    		beforeMerged { classpath ->
    			def tomcatRuntimeContainer \
                        = new org.gradle.plugins.ide.eclipse.model.Container('org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/Apache Tomcat v7.0')
    			classpath.entries << tomcatRuntimeContainer
    		}
    		whenMerged { classpath ->
        		classpath.entries.findAll { entry -> entry.kind == 'lib' && entry.path.contains('junit') }*.exported = false
    		}
    	}
    }
}


repositories {
    mavenCentral()
}
 
dependencies {
    // struts 2
    compile group:'org.apache.struts',name:'struts2-core', version: '2.3.16.3+'
    // log
    compile 'commons-logging:commons-logging:1.1.3'
    compile 'commons-logging:commons-logging-api:1.1'

    // test
    testCompile 'junit:junit:[4,)'
}

